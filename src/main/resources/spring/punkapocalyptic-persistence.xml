<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- enables scanning for @Transactional annotations -->
	<tx:annotation-driven />

	<!-- Loads JPA beans Will automatically be transactional due to @Transactional. 
		EntityManager will be auto-injected due to @PersistenceContext. PersistenceExceptions 
		will be auto-translated due to @Repository. -->
	<context:component-scan
		base-package="com.wandrell.tabletop.punkapocalyptic.punkabuilder.repository" />

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory" class="${jpa.entityManagerFactory.class}">
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="${jpa.database}" />
				<property name="showSql" value="${jpa.showSql}" />
			</bean>
		</property>
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="${jpa.persistenceUnitName}" />
		<property name="packagesToScan" value="${jpa.packagesToScan}" />
		<property name="jpaProperties" ref="jpaProperties" />
	</bean>

	<util:map id="jpaProperties">
		<entry key="hibernate.dialect" value="${hibernate.dialect}" />
		<entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" />
		<entry key="hibernate.ejb.naming_strategy" value="${hibernate.ejb.naming_strategy}" />
		<entry key="hibernate.ejb.naming_strategy" value="${hibernate.ejb.naming_strategy}" />
		<entry key="hibernate.show_sql" value="${hibernate.show_sql}" />
		<entry key="hibernate.format_sql" value="${hibernate.format_sql}" />
	</util:map>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative 
		to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Post-processor to perform exception translation on @Repository classes 
		(from native exceptions such as JPA PersistenceExceptions to Spring's DataAccessException 
		hierarchy). -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- ========================= DATASOURCE DEFINITION ========================= -->

	<bean id="dataSource" class="${jdbc.datasource.class}">
		<constructor-arg ref="dataSourceConfig" />
	</bean>

	<bean id="dataSourceConfig" class="${jdbc.datasource.config.class}">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Database initializer. If any of the script fails, the initialization 
		stops. -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="${jdbc.initLocation}" />
		<jdbc:script location="${jdbc.dataLocation}" />
	</jdbc:initialize-database>

</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<!-- enables scanning for @Transactional annotations -->
	<tx:annotation-driven />

	<!-- Loads JPA beans Will automatically be transactional due to @Transactional. 
		EntityManager will be auto-injected due to @PersistenceContext. PersistenceExceptions 
		will be auto-translated due to @Repository. -->
	<context:component-scan base-package="com.wandrell.tabletop.punkapocalyptic.punkabuilder.repository" />

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="${jpa.database}" />
				<property name="showSql" value="${jpa.showSql}" />
			</bean>
		</property>
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="${jpa.persistenceUnitName}" />
		<property name="packagesToScan" value="${jpa.packagesToScan}" />
	</bean>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative 
		to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Post-processor to perform exception translation on @Repository classes 
		(from native exceptions such as JPA PersistenceExceptions to Spring's DataAccessException 
		hierarchy). -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- ========================= DATASOURCE DEFINITION ========================= -->

	<!-- DataSource configuration for the tomcat jdbc connection pool See here 
		for more details on commons-dbcp versus tomcat-jdbc: http://blog.ippon.fr/2013/03/13/improving-the-performance-of-the-spring-petclinic-sample-application-part-3-of-5/ -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Database initializer. If any of the script fails, the initialization 
		stops. -->
	<!-- As an alternative, for embedded databases see <jdbc:embedded-database/>. -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="${jdbc.initLocation}" />
		<jdbc:script location="${jdbc.dataLocation}" />
	</jdbc:initialize-database>

</beans>